// <auto-generated />
using System;
using CalendarSync.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CalendarSync.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20220720151457_AddSyncState")]
    partial class AddSyncState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("CalendarSync.Model.AdditionalData", b =>
                {
                    b.Property<int>("AdditionalDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("AdditionalDataId");

                    b.HasIndex("EventBodyId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventLocationId");

                    b.ToTable("AdditionalDatas");
                });

            modelBuilder.Entity("CalendarSync.Model.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ICalUid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnlineMeetingUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShowAs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("EventBodyId");

                    b.HasIndex("EventLocationId");

                    b.HasIndex("ICalUid", "Uid");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CalendarSync.Model.EventBody", b =>
                {
                    b.Property<int>("EventBodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventBodyId");

                    b.ToTable("EventBodies");
                });

            modelBuilder.Entity("CalendarSync.Model.EventFilter", b =>
                {
                    b.Property<int>("EventFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIgnore")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventFilterId");

                    b.ToTable("EventFilters");

                    b.HasData(
                        new
                        {
                            EventFilterId = 1,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Dentist"
                        },
                        new
                        {
                            EventFilterId = 2,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Orthodontist"
                        },
                        new
                        {
                            EventFilterId = 3,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Therapist"
                        },
                        new
                        {
                            EventFilterId = 4,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Therapy"
                        },
                        new
                        {
                            EventFilterId = 5,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Doctor"
                        },
                        new
                        {
                            EventFilterId = 6,
                            IsIgnore = false,
                            IsPersonal = true,
                            Search = "Dermatologist"
                        },
                        new
                        {
                            EventFilterId = 7,
                            IsIgnore = true,
                            IsPersonal = true,
                            Search = "Change furnace filters"
                        });
                });

            modelBuilder.Entity("CalendarSync.Model.EventLocation", b =>
                {
                    b.Property<int>("EventLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("EventLocationId");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("CalendarSync.Model.SyncState", b =>
                {
                    b.Property<int>("SyncStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeltaUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SyncStateId");

                    b.ToTable("SyncStates");
                });

            modelBuilder.Entity("CalendarSync.Model.AdditionalData", b =>
                {
                    b.HasOne("CalendarSync.Model.EventBody", null)
                        .WithMany("AdditionalDatas")
                        .HasForeignKey("EventBodyId");

                    b.HasOne("CalendarSync.Model.Event", null)
                        .WithMany("AdditionalDatas")
                        .HasForeignKey("EventId");

                    b.HasOne("CalendarSync.Model.EventLocation", null)
                        .WithMany("AdditionalDatas")
                        .HasForeignKey("EventLocationId");
                });

            modelBuilder.Entity("CalendarSync.Model.Event", b =>
                {
                    b.HasOne("CalendarSync.Model.EventBody", "EventBody")
                        .WithMany()
                        .HasForeignKey("EventBodyId");

                    b.HasOne("CalendarSync.Model.EventLocation", "EventLocation")
                        .WithMany()
                        .HasForeignKey("EventLocationId");

                    b.Navigation("EventBody");

                    b.Navigation("EventLocation");
                });

            modelBuilder.Entity("CalendarSync.Model.Event", b =>
                {
                    b.Navigation("AdditionalDatas");
                });

            modelBuilder.Entity("CalendarSync.Model.EventBody", b =>
                {
                    b.Navigation("AdditionalDatas");
                });

            modelBuilder.Entity("CalendarSync.Model.EventLocation", b =>
                {
                    b.Navigation("AdditionalDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
